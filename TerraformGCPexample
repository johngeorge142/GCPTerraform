Johns-MBP:Desktop johngeorge$ cd learn-terraform-gcp/
Johns-MBP:learn-terraform-gcp johngeorge$ ls
learn-terraform-docker-container	main.tf
Johns-MBP:learn-terraform-gcp johngeorge$ clear

Johns-MBP:learn-terraform-gcp johngeorge$ ls
learn-terraform-docker-container	main.tf
Johns-MBP:learn-terraform-gcp johngeorge$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/google versions matching "3.5.0"...
- Installing hashicorp/google v3.5.0...
- Installed hashicorp/google v3.5.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
Johns-MBP:learn-terraform-gcp johngeorge$ terraform fmt
main.tf
Johns-MBP:learn-terraform-gcp johngeorge$ terraform validate
╷
│ Error: Invalid function argument
│ 
│   on main.tf line 11, in provider "google":
│   11:   credentials = file("<NAME>.json")
│ 
│ Invalid value for "path" parameter: no file exists at "<NAME>.json"; this
│ function works only with files that are distributed as part of the
│ configuration source code, so if this file will be created by a resource in
│ this configuration you must instead obtain this result from an attribute of
│ that resource.
╵
Johns-MBP:learn-terraform-gcp johngeorge$ terraform apply
╷
│ Error: Invalid function argument
│ 
│   on main.tf line 11, in provider "google":
│   11:   credentials = file("<NAME>.json")
│ 
│ Invalid value for "path" parameter: no file exists at "<NAME>.json"; this
│ function works only with files that are distributed as part of the
│ configuration source code, so if this file will be created by a resource in
│ this configuration you must instead obtain this result from an attribute of
│ that resource.
╵
Johns-MBP:learn-terraform-gcp johngeorge$ gcloud auth login
Your browser has been opened to visit:

    https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=32555940559.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A8085%2F&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fsqlservice.login+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth&state=eHZZ3EZh8Z26GoOBCtL32v2ks4IeSv&access_type=offline&code_challenge=GcLI3d3YJc4xVKSLT4NpvuOkFdSrKI8Frgdvpmt2LGI&code_challenge_method=S256


You are now logged in as [jeryngeorge@gmail.com].
Your current project is [terraform-gcp-360619].  You can change this setting by running:
  $ gcloud config set project PROJECT_ID
Johns-MBP:learn-terraform-gcp johngeorge$ terraform validate
╷
│ Error: Invalid function argument
│ 
│   on main.tf line 11, in provider "google":
│   11:   credentials = file("<NAME>.json")
│ 
│ Invalid value for "path" parameter: no file exists at "<NAME>.json"; this
│ function works only with files that are distributed as part of the
│ configuration source code, so if this file will be created by a resource in
│ this configuration you must instead obtain this result from an attribute of
│ that resource.
╵
Johns-MBP:learn-terraform-gcp johngeorge$ ls
learn-terraform-docker-container	main.tf
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ ls
learn-terraform-docker-container	main.tf
Johns-MBP:learn-terraform-gcp johngeorge$ pwd
/Users/johngeorge/Desktop/learn-terraform-gcp
Johns-MBP:learn-terraform-gcp johngeorge$ ls
learn-terraform-docker-container	main.tf
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ ls
kubectl.sha256				main.tf
learn-terraform-docker-container
Johns-MBP:learn-terraform-gcp johngeorge$ pwd
/Users/johngeorge/Desktop/learn-terraform-gcp
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ clear

Johns-MBP:learn-terraform-gcp johngeorge$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/google from the dependency lock file
- Using previously-installed hashicorp/google v3.5.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
Johns-MBP:learn-terraform-gcp johngeorge$ terraform fmt
main.tf
Johns-MBP:learn-terraform-gcp johngeorge$ terraform validate
╷
│ Error: Invalid function argument
│ 
│   on main.tf line 11, in provider "google":
│   11:   credentials = file(".terraform-gcp-360619-e9b642f16517json")
│ 
│ Invalid value for "path" parameter: no file exists at
│ ".terraform-gcp-360619-e9b642f16517json"; this function works only with files
│ that are distributed as part of the configuration source code, so if this
│ file will be created by a resource in this configuration you must instead
│ obtain this result from an attribute of that resource.
╵
Johns-MBP:learn-terraform-gcp johngeorge$ ls
learn-terraform-docker-container	terraform-gcp-360619-e9b642f16517.json
main.tf
Johns-MBP:learn-terraform-gcp johngeorge$ pwd
/Users/johngeorge/Desktop/learn-terraform-gcp
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ terraform validate
╷
│ Error: Invalid multi-line string
│ 
│   on main.tf line 11, in provider "google":
│   11:   credentials = file("/Users/johngeorge/Desktop/learn-terraform-gcp
│   12: /terraform-gcp-360619-e9b642f16517json")
│ 
│ Quoted strings may not be split over multiple lines. To produce a multi-line
│ string, either use the \n escape to represent a newline character or use the
│ "heredoc" multi-line template syntax.
╵
╷
│ Error: Unterminated template string
│ 
│   on main.tf line 11, in provider "google":
│   11:   credentials = file("/Users/johngeorge/Desktop/learn-terraform-gcp
│   12: /terraform-gcp-360619-e9b642f16517json")
│ 
│ No closing marker was found for the string.
╵
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ terraform validate
╷
│ Error: Invalid function argument
│ 
│   on main.tf line 11, in provider "google":
│   11:   credentials = file("terraform-gcp-360619-e9b642f16517json")
│ 
│ Invalid value for "path" parameter: no file exists at
│ "terraform-gcp-360619-e9b642f16517json"; this function works only with files
│ that are distributed as part of the configuration source code, so if this
│ file will be created by a resource in this configuration you must instead
│ obtain this result from an attribute of that resource.
╵
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ terraform validate
Success! The configuration is valid.

Johns-MBP:learn-terraform-gcp johngeorge$ clear

Johns-MBP:learn-terraform-gcp johngeorge$ terraform apply

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_compute_network.vpc_network will be created
  + resource "google_compute_network" "vpc_network" {
      + auto_create_subnetworks         = true
      + delete_default_routes_on_create = false
      + gateway_ipv4                    = (known after apply)
      + id                              = (known after apply)
      + ipv4_range                      = (known after apply)
      + name                            = "terraform-network"
      + project                         = (known after apply)
      + routing_mode                    = (known after apply)
      + self_link                       = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_compute_network.vpc_network: Creating...
╷
│ Error: Error creating Network: googleapi: Error 403: Compute Engine API has not been used in project 822280484971 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/compute.googleapis.com/overview?project=822280484971 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry., accessNotConfigured
│ 
│   with google_compute_network.vpc_network,
│   on main.tf line 18, in resource "google_compute_network" "vpc_network":
│   18: resource "google_compute_network" "vpc_network" {
│ 
╵
Johns-MBP:learn-terraform-gcp johngeorge$ terraform apply

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_compute_network.vpc_network will be created
  + resource "google_compute_network" "vpc_network" {
      + auto_create_subnetworks         = true
      + delete_default_routes_on_create = false
      + gateway_ipv4                    = (known after apply)
      + id                              = (known after apply)
      + ipv4_range                      = (known after apply)
      + name                            = "terraform-network"
      + project                         = (known after apply)
      + routing_mode                    = (known after apply)
      + self_link                       = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_compute_network.vpc_network: Creating...
google_compute_network.vpc_network: Still creating... [10s elapsed]
google_compute_network.vpc_network: Still creating... [20s elapsed]
google_compute_network.vpc_network: Still creating... [30s elapsed]
google_compute_network.vpc_network: Creation complete after 36s [id=projects/terraform-gcp-360619/global/networks/terraform-network]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
Johns-MBP:learn-terraform-gcp johngeorge$ terraform show
# google_compute_network.vpc_network:
resource "google_compute_network" "vpc_network" {
    auto_create_subnetworks         = true
    delete_default_routes_on_create = false
    id                              = "projects/terraform-gcp-360619/global/networks/terraform-network"
    name                            = "terraform-network"
    project                         = "terraform-gcp-360619"
    routing_mode                    = "REGIONAL"
    self_link                       = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/global/networks/terraform-network"
}
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ terraform apply
google_compute_network.vpc_network: Refreshing state... [id=projects/terraform-gcp-360619/global/networks/terraform-network]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_compute_instance.vm_instance will be created
  + resource "google_compute_instance" "vm_instance" {
      + can_ip_forward       = false
      + cpu_platform         = (known after apply)
      + deletion_protection  = false
      + guest_accelerator    = (known after apply)
      + id                   = (known after apply)
      + instance_id          = (known after apply)
      + label_fingerprint    = (known after apply)
      + machine_type         = "f1-micro"
      + metadata_fingerprint = (known after apply)
      + min_cpu_platform     = (known after apply)
      + name                 = "terraform-instance"
      + project              = (known after apply)
      + self_link            = (known after apply)
      + tags_fingerprint     = (known after apply)
      + zone                 = (known after apply)

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "debian-cloud/debian-9"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + name               = (known after apply)
          + network            = "terraform-network"
          + network_ip         = (known after apply)
          + subnetwork         = (known after apply)
          + subnetwork_project = (known after apply)

          + access_config {
              + nat_ip       = (known after apply)
              + network_tier = (known after apply)
            }
        }

      + scheduling {
          + automatic_restart   = (known after apply)
          + on_host_maintenance = (known after apply)
          + preemptible         = (known after apply)

          + node_affinities {
              + key      = (known after apply)
              + operator = (known after apply)
              + values   = (known after apply)
            }
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_compute_instance.vm_instance: Creating...
╷
│ Error: Error resolving image name 'debian-cloud/debian-9': Could not find image or family debian-cloud/debian-9
│ 
│   with google_compute_instance.vm_instance,
│   on main.tf line 22, in resource "google_compute_instance" "vm_instance":
│   22: resource "google_compute_instance" "vm_instance" {
│ 
╵
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ terraform apply
google_compute_network.vpc_network: Refreshing state... [id=projects/terraform-gcp-360619/global/networks/terraform-network]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_compute_instance.vm_instance will be created
  + resource "google_compute_instance" "vm_instance" {
      + can_ip_forward       = false
      + cpu_platform         = (known after apply)
      + deletion_protection  = false
      + guest_accelerator    = (known after apply)
      + id                   = (known after apply)
      + instance_id          = (known after apply)
      + label_fingerprint    = (known after apply)
      + machine_type         = "f1-micro"
      + metadata_fingerprint = (known after apply)
      + min_cpu_platform     = (known after apply)
      + name                 = "terraform-instance"
      + project              = (known after apply)
      + self_link            = (known after apply)
      + tags_fingerprint     = (known after apply)
      + zone                 = (known after apply)

      + boot_disk {
          + auto_delete                = true
          + device_name                = (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          + mode                       = "READ_WRITE"
          + source                     = (known after apply)

          + initialize_params {
              + image  = "debian-cloud/debian-10"
              + labels = (known after apply)
              + size   = (known after apply)
              + type   = (known after apply)
            }
        }

      + network_interface {
          + name               = (known after apply)
          + network            = "terraform-network"
          + network_ip         = (known after apply)
          + subnetwork         = (known after apply)
          + subnetwork_project = (known after apply)

          + access_config {
              + nat_ip       = (known after apply)
              + network_tier = (known after apply)
            }
        }

      + scheduling {
          + automatic_restart   = (known after apply)
          + on_host_maintenance = (known after apply)
          + preemptible         = (known after apply)

          + node_affinities {
              + key      = (known after apply)
              + operator = (known after apply)
              + values   = (known after apply)
            }
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_compute_instance.vm_instance: Creating...
google_compute_instance.vm_instance: Creation complete after 9s [id=projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ terraform apply
google_compute_network.vpc_network: Refreshing state... [id=projects/terraform-gcp-360619/global/networks/terraform-network]
google_compute_instance.vm_instance: Refreshing state... [id=projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  ~ update in-place

Terraform will perform the following actions:

  # google_compute_instance.vm_instance will be updated in-place
  ~ resource "google_compute_instance" "vm_instance" {
        id                   = "projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance"
        name                 = "terraform-instance"
      ~ tags                 = [
          + "dev",
          + "web",
        ]
        # (15 unchanged attributes hidden)

        # (4 unchanged blocks hidden)
    }

Plan: 0 to add, 1 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_compute_instance.vm_instance: Modifying... [id=projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance]
google_compute_instance.vm_instance: Modifications complete after 7s [id=projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance]

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.
Johns-MBP:learn-terraform-gcp johngeorge$ vim main.tf 
Johns-MBP:learn-terraform-gcp johngeorge$ terraform apply
google_compute_network.vpc_network: Refreshing state... [id=projects/terraform-gcp-360619/global/networks/terraform-network]
google_compute_instance.vm_instance: Refreshing state... [id=projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance]

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # google_compute_instance.vm_instance must be replaced
-/+ resource "google_compute_instance" "vm_instance" {
      ~ cpu_platform         = "Intel Haswell" -> (known after apply)
      - enable_display       = false -> null
      ~ guest_accelerator    = [] -> (known after apply)
      ~ id                   = "projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance" -> (known after apply)
      ~ instance_id          = "6702021015157116447" -> (known after apply)
      ~ label_fingerprint    = "42WmSpB8rSM=" -> (known after apply)
      - labels               = {} -> null
      - metadata             = {} -> null
      ~ metadata_fingerprint = "37r13It23JM=" -> (known after apply)
      + min_cpu_platform     = (known after apply)
        name                 = "terraform-instance"
      ~ project              = "terraform-gcp-360619" -> (known after apply)
      ~ self_link            = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance" -> (known after apply)
        tags                 = [
            "dev",
            "web",
        ]
      ~ tags_fingerprint     = "XaeQnaHMn9Y=" -> (known after apply)
      ~ zone                 = "us-central1-c" -> (known after apply)
        # (3 unchanged attributes hidden)

      ~ boot_disk {
          ~ device_name                = "persistent-disk-0" -> (known after apply)
          + disk_encryption_key_sha256 = (known after apply)
          + kms_key_self_link          = (known after apply)
          ~ source                     = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/zones/us-central1-c/disks/terraform-instance" -> (known after apply)
            # (2 unchanged attributes hidden)

          ~ initialize_params {
              ~ image  = "https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/debian-10-buster-v20220822" -> "cos-cloud/cos-stable" # forces replacement
              ~ labels = {} -> (known after apply)
              ~ size   = 10 -> (known after apply)
              ~ type   = "pd-standard" -> (known after apply)
            }
        }

      ~ network_interface {
          ~ name               = "nic0" -> (known after apply)
          ~ network            = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/global/networks/terraform-network" -> "terraform-network"
          ~ network_ip         = "10.128.0.2" -> (known after apply)
          ~ subnetwork         = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/regions/us-central1/subnetworks/terraform-network" -> (known after apply)
          ~ subnetwork_project = "terraform-gcp-360619" -> (known after apply)

          ~ access_config {
              ~ nat_ip       = "35.193.74.57" -> (known after apply)
              ~ network_tier = "PREMIUM" -> (known after apply)
            }
        }

      ~ scheduling {
          ~ automatic_restart   = true -> (known after apply)
          ~ on_host_maintenance = "MIGRATE" -> (known after apply)
          ~ preemptible         = false -> (known after apply)

          + node_affinities {
              + key      = (known after apply)
              + operator = (known after apply)
              + values   = (known after apply)
            }
        }

      - shielded_instance_config {
          - enable_integrity_monitoring = true -> null
          - enable_secure_boot          = false -> null
          - enable_vtpm                 = true -> null
        }
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_compute_instance.vm_instance: Destroying... [id=projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance]
google_compute_instance.vm_instance: Still destroying... [id=projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance, 10s elapsed]
google_compute_instance.vm_instance: Still destroying... [id=projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance, 20s elapsed]
google_compute_instance.vm_instance: Destruction complete after 25s
google_compute_instance.vm_instance: Creating...
google_compute_instance.vm_instance: Creation complete after 9s [id=projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.
Johns-MBP:learn-terraform-gcp johngeorge$ terraform show
# google_compute_instance.vm_instance:
resource "google_compute_instance" "vm_instance" {
    can_ip_forward       = false
    cpu_platform         = "Intel Haswell"
    deletion_protection  = false
    enable_display       = false
    guest_accelerator    = []
    id                   = "projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance"
    instance_id          = "455556202037022558"
    label_fingerprint    = "42WmSpB8rSM="
    machine_type         = "f1-micro"
    metadata_fingerprint = "37r13It23JM="
    name                 = "terraform-instance"
    project              = "terraform-gcp-360619"
    self_link            = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/zones/us-central1-c/instances/terraform-instance"
    tags                 = [
        "dev",
        "web",
    ]
    tags_fingerprint     = "XaeQnaHMn9Y="
    zone                 = "us-central1-c"

    boot_disk {
        auto_delete = true
        device_name = "persistent-disk-0"
        mode        = "READ_WRITE"
        source      = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/zones/us-central1-c/disks/terraform-instance"

        initialize_params {
            image  = "https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-stable-97-16919-103-28"
            labels = {}
            size   = 10
            type   = "pd-standard"
        }
    }

    network_interface {
        name               = "nic0"
        network            = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/global/networks/terraform-network"
        network_ip         = "10.128.0.3"
        subnetwork         = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/regions/us-central1/subnetworks/terraform-network"
        subnetwork_project = "terraform-gcp-360619"

        access_config {
            nat_ip       = "34.171.22.208"
            network_tier = "PREMIUM"
        }
    }

    scheduling {
        automatic_restart   = true
        on_host_maintenance = "MIGRATE"
        preemptible         = false
    }

    shielded_instance_config {
        enable_integrity_monitoring = true
        enable_secure_boot          = false
        enable_vtpm                 = true
    }
}

# google_compute_network.vpc_network:
resource "google_compute_network" "vpc_network" {
    auto_create_subnetworks         = true
    delete_default_routes_on_create = false
    id                              = "projects/terraform-gcp-360619/global/networks/terraform-network"
    name                            = "terraform-network"
    project                         = "terraform-gcp-360619"
    routing_mode                    = "REGIONAL"
    self_link                       = "https://www.googleapis.com/compute/v1/projects/terraform-gcp-360619/global/networks/terraform-network"
}
Johns-MBP:learn-terraform-gcp johngeorge$ 
